public void insert(RBNode newNode) {
        RBNode currentNode = getRoot();
        boolean found = false;

        if(getRoot() == null){ // caso 1: arbol vacio => se inserta en la raiz
            setRoot(newNode);
            getRoot().setColor(Color.BLACK); // propiedad 2: la raiz debe ser negra
        }
        else{ // caso 2: el arbol ya tiene elementos
            while(found == false){ // busca el lugar donde va el nodo
                colorBalanceDown(currentNode); // algunas cond. de color se controlan mientras bajamos
                if(newNode.getData() >= currentNode.getData()){ // es mayor o igual => miro a la derecha
                    if(currentNode.getRight() != null){ // el hijo der no esta vacio => segui buscando
                        currentNode = currentNode.getRight();
                    }
                    else{ // el hijo der esta vacio => ahi va newNode
                        found = true;
                        currentNode.setRight(newNode);
                    }
                }
                else{ // newNode.getData() < currentNode.getData() // es menor => miro a la izq
                    if(currentNode.getLeft() != null){ // hijo izq NO vacio => segui buscando
                        currentNode = currentNode.getLeft();
                    }
                    else{ // hijo izq vacio => ahi va newNode
                        found = true;
                        currentNode.setLeft(newNode);
                    }
                }
            }
            newNode.setParent(currentNode); // la actualizacion del padre es igual para los dos casos
            solveExtraRedness(newNode); // mira si hay dos rojos consecutivos tras insertar. Si es asi, lo resuelve
        }
    }